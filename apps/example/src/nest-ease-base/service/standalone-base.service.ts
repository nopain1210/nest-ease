// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { PrismaService } from '../../prisma/prisma.service';
import { Prisma } from '../../prisma-client';
import { Standalone } from '../model';
import { AffectedRowsOutput } from '../output';

export class StandaloneBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: Prisma.StandaloneCreateArgs): Promise<Standalone> {
    return this.prisma.client.standalone.create(args);
  }

  async update(args: Prisma.StandaloneUpdateArgs): Promise<Standalone | null> {
    return this.prisma.client.standalone.update(args);
  }

  async delete(args: Prisma.StandaloneDeleteArgs): Promise<Standalone | null> {
    return this.prisma.client.standalone.delete(args);
  }

  async deleteMany(
    args: Prisma.StandaloneDeleteManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.prisma.client.standalone.deleteMany(args);
  }

  async findUnique(
    args: Prisma.StandaloneFindUniqueArgs
  ): Promise<Standalone | null> {
    return this.prisma.client.standalone.findUnique(args);
  }

  async findMany(
    args: Prisma.StandaloneFindManyArgs
  ): Promise<Array<Standalone>> {
    return this.prisma.client.standalone.findMany(args);
  }

  count(args: Prisma.StandaloneCountArgs): Promise<number> {
    return this.prisma.client.standalone.count(args);
  }
}
