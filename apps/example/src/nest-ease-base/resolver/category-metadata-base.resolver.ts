// This file is generated by @nest-ease/generator. DO NOT MODIFY!
/* eslint-disable @typescript-eslint/no-explicit-any */
import { CategoryMetadataBaseService } from '../service';
import {
  Resolver,
  Query,
  Mutation,
  Args,
  Parent,
  ResolveField,
} from '@nestjs/graphql';
import { CategoryMetadata, Category } from '../model';
import {
  CategoryMetadataCreateArgs,
  CategoryMetadataUpdateArgs,
  CategoryMetadataDeleteArgs,
  CategoryMetadataDeleteManyArgs,
  CategoryMetadataFindUniqueArgs,
  CategoryMetadataFindManyArgs,
} from '../args';
import { AffectedRowsOutput } from '../output';

@Resolver(() => CategoryMetadata)
export class CategoryMetadataBaseResolver {
  constructor(protected readonly service: CategoryMetadataBaseService) {}

  @Mutation(() => CategoryMetadata, { nullable: false })
  async createCategoryMetadata(
    @Args() args: CategoryMetadataCreateArgs
  ): Promise<CategoryMetadata> {
    return this.service.create(args);
  }

  @Mutation(() => CategoryMetadata, { nullable: true })
  async updateCategoryMetadata(
    @Args() args: CategoryMetadataUpdateArgs
  ): Promise<CategoryMetadata | null> {
    return this.service.update(args);
  }

  @Mutation(() => CategoryMetadata, { nullable: true })
  async deleteCategoryMetadata(
    @Args() args: CategoryMetadataDeleteArgs
  ): Promise<CategoryMetadata | null> {
    return this.service.delete(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteCategoryMetadataList(
    @Args() args: CategoryMetadataDeleteManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.service.deleteMany(args);
  }

  @Query(() => CategoryMetadata, { nullable: true })
  async categoryMetadata(
    @Args() args: CategoryMetadataFindUniqueArgs
  ): Promise<CategoryMetadata | null> {
    return this.service.findUnique(args);
  }

  @Query(() => [CategoryMetadata], { nullable: false })
  async categoryMetadataList(
    @Args() args: CategoryMetadataFindManyArgs
  ): Promise<Array<CategoryMetadata>> {
    return this.service.findMany(args);
  }

  @ResolveField(() => Category, { nullable: false })
  category(@Parent() parent: CategoryMetadata): Promise<Category> {
    return this.service.resolveCategory(parent);
  }

  @Query(() => Number)
  categoryMetadataCount(
    @Args() args: CategoryMetadataFindManyArgs
  ): Promise<number> {
    return this.service.count(args);
  }
}
