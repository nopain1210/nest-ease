// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { CategoryBaseService } from '../service';
import {
  Resolver,
  Query,
  Mutation,
  Args,
  Parent,
  ResolveField,
} from '@nestjs/graphql';
import { Category, Post, CategoryMetadata } from '../model';
import {
  CategoryCreateArgs,
  CategoryUpdateArgs,
  CategoryDeleteArgs,
  CategoryDeleteManyArgs,
  CategoryFindUniqueArgs,
  CategoryFindManyArgs,
  PostFindManyArgs,
} from '../args';
import { AffectedRowsOutput } from '../output';

@Resolver(() => Category)
export class CategoryBaseResolver {
  constructor(protected readonly service: CategoryBaseService) {}

  @Mutation(() => Category, { nullable: false })
  async createCategory(@Args() args: CategoryCreateArgs): Promise<Category> {
    return this.service.create(args);
  }

  @Mutation(() => Category, { nullable: true })
  async updateCategory(
    @Args() args: CategoryUpdateArgs
  ): Promise<Category | null> {
    return this.service.update(args);
  }

  @Mutation(() => Category, { nullable: true })
  async deleteCategory(
    @Args() args: CategoryDeleteArgs
  ): Promise<Category | null> {
    return this.service.delete(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteCategoryList(
    @Args() args: CategoryDeleteManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.service.deleteMany(args);
  }

  @Query(() => Category, { nullable: true })
  async category(
    @Args() args: CategoryFindUniqueArgs
  ): Promise<Category | null> {
    return this.service.findUnique(args);
  }

  @Query(() => [Category], { nullable: false })
  async categoryList(
    @Args() args: CategoryFindManyArgs
  ): Promise<Array<Category>> {
    return this.service.findMany(args);
  }

  @ResolveField(() => [Post], { nullable: false })
  posts(
    @Parent() parent: Category,
    @Args() args: PostFindManyArgs
  ): Promise<Array<Post>> {
    return this.service.resolvePosts(parent, args);
  }

  @ResolveField(() => CategoryMetadata, { nullable: true })
  metadata(@Parent() parent: Category): Promise<CategoryMetadata | null> {
    return this.service.resolveMetadata(parent);
  }

  @Query(() => Number)
  categoryCount(@Args() args: CategoryFindManyArgs): Promise<number> {
    return this.service.count(args);
  }
}
