// This file is generated by @nest-ease/generator. DO NOT MANUALLY MODIFY!
import { StandaloneModelBaseService } from './standalone-model-base.service';
import { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';
import { StandaloneModel } from './model/standalone.model';
import { StandaloneModelCreateArgs } from './args/standalone-model-create.args';
import { StandaloneModelUpdateArgs } from './args/standalone-model-update.args';
import { StandaloneModelDeleteArgs } from './args/standalone-model-delete.args';
import { StandaloneModelFindUniqueArgs } from './args/standalone-model-find-unique.args';
import { StandaloneModelCountArgs } from './args/standalone-model-count.args';
import { StandaloneModelFindManyArgs } from './args/standalone-model-find-many.args';
import { AffectedRowsOutput } from '../../prisma/base/output/affected-rows.output';
import { StandaloneModelCreateManyArgs } from './args/standalone-model-create-many.args';
import { StandaloneModelUpdateManyArgs } from './args/standalone-model-update-many.args';
import { StandaloneModelDeleteManyArgs } from './args/standalone-model-delete-many.args';

@Resolver(() => StandaloneModel)
export class StandaloneModelBaseResolver {
  constructor(protected readonly service: StandaloneModelBaseService) {}

  @Mutation(() => StandaloneModel, { nullable: false })
  async createStandaloneModel(
    @Args() args: StandaloneModelCreateArgs,
  ): Promise<StandaloneModel> {
    return this.service.create(args);
  }

  @Mutation(() => StandaloneModel, { nullable: true })
  async updateStandaloneModel(
    @Args() args: StandaloneModelUpdateArgs,
  ): Promise<StandaloneModel | null> {
    return this.service.update(args);
  }

  @Mutation(() => StandaloneModel, { nullable: true })
  async deleteStandaloneModel(
    @Args() args: StandaloneModelDeleteArgs,
  ): Promise<StandaloneModel | null> {
    return this.service.delete(args);
  }

  @Query(() => StandaloneModel, { nullable: true })
  async standaloneModel(
    @Args() args: StandaloneModelFindUniqueArgs,
  ): Promise<StandaloneModel | null> {
    return this.service.findUnique(args);
  }

  @Query(() => Int, { nullable: false })
  async standaloneModelCount(
    @Args() args: StandaloneModelCountArgs,
  ): Promise<number> {
    return this.service.count(args);
  }

  @Query(() => [StandaloneModel], { nullable: false })
  async standaloneModelList(
    @Args() args: StandaloneModelFindManyArgs,
  ): Promise<Array<StandaloneModel>> {
    return this.service.findMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createStandaloneModelList(
    @Args() args: StandaloneModelCreateManyArgs,
  ): Promise<AffectedRowsOutput> {
    return this.service.createMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateStandaloneModelList(
    @Args() args: StandaloneModelUpdateManyArgs,
  ): Promise<AffectedRowsOutput> {
    return this.service.updateMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteStandaloneModelList(
    @Args() args: StandaloneModelDeleteManyArgs,
  ): Promise<AffectedRowsOutput> {
    return this.service.deleteMany(args);
  }
}
