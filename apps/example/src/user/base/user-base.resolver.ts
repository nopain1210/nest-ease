// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { UserBaseService } from './user-base.service';
import { Resolver, Query, Mutation, Args, Int, Parent, ResolveField } from '@nestjs/graphql';
import { User } from './model/user.model';
import { UserCreateArgs } from './args/user-create.args';
import { UserUpdateArgs } from './args/user-update.args';
import { UserDeleteArgs } from './args/user-delete.args';
import { UserFindUniqueArgs } from './args/user-find-unique.args';
import { UserCountArgs } from './args/user-count.args';
import { UserFindManyArgs } from './args/user-find-many.args';
import { AffectedRowsOutput } from '../../prisma/base/output/affected-rows.output';
import { UserCreateManyArgs } from './args/user-create-many.args';
import { UserUpdateManyArgs } from './args/user-update-many.args';
import { UserDeleteManyArgs } from './args/user-delete-many.args';
import { PostFindManyArgs } from '../../post/base/args/post-find-many.args';
import { Post } from '../../post/base/model/post.model';

@Resolver(() => User)
export class UserBaseResolver {
  constructor(protected readonly service: UserBaseService) {
  }

  @Mutation(() => User, { nullable: false })
  async createUser(@Args() args: UserCreateArgs): Promise<User> {
    return this.service.create(args);
  }

  @Mutation(() => User, { nullable: true })
  async updateUser(@Args() args: UserUpdateArgs): Promise<User | null> {
    return this.service.update(args);
  }

  @Mutation(() => User, { nullable: true })
  async deleteUser(@Args() args: UserDeleteArgs): Promise<User | null> {
    return this.service.delete(args);
  }

  @Query(() => User, { nullable: true })
  async user(@Args() args: UserFindUniqueArgs): Promise<User | null> {
    return this.service.findUnique(args);
  }

  @Query(() => Int, { nullable: false })
  async userCount(@Args() args: UserCountArgs): Promise<number> {
    return this.service.count(args);
  }

  @Query(() => [User], { nullable: false })
  async userList(@Args() args: UserFindManyArgs): Promise<Array<User>> {
    return this.service.findMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createUserList(@Args() args: UserCreateManyArgs): Promise<AffectedRowsOutput> {
    return this.service.createMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateUserList(@Args() args: UserUpdateManyArgs): Promise<AffectedRowsOutput> {
    return this.service.updateMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteUserList(@Args() args: UserDeleteManyArgs): Promise<AffectedRowsOutput> {
    return this.service.deleteMany(args);
  }

  @ResolveField(() => [Post], { nullable: false })
  posts(@Parent() parent: User, @Args() args: PostFindManyArgs): Promise<Array<Post>> {

    return this.service.resolvePosts(parent, args);
            
  }

  @ResolveField(() => User, { nullable: true })
  parent(@Parent() parent: User): Promise<User | null> {

    return this.service.resolveParent(parent);
            
  }

  @ResolveField(() => [User], { nullable: false })
  children(@Parent() parent: User, @Args() args: UserFindManyArgs): Promise<Array<User>> {

    return this.service.resolveChildren(parent, args);
            
  }

  @ResolveField(() => [Post], { nullable: false })
  anotherPosts(@Parent() parent: User, @Args() args: PostFindManyArgs): Promise<Array<Post>> {

    return this.service.resolveAnotherPosts(parent, args);
            
  }
}
