// This file is generated by @nest-ease/generator. DO NOT MANUALLY MODIFY!
import { PrismaService } from '../../prisma/prisma.service';
import { User } from './model/user.model';
import { UserCreateArgs } from './args/user-create.args';
import { UserUpdateArgs } from './args/user-update.args';
import { UserDeleteArgs } from './args/user-delete.args';
import { UserFindUniqueArgs } from './args/user-find-unique.args';
import { UserCountArgs } from './args/user-count.args';
import { UserFindManyArgs } from './args/user-find-many.args';
import { AffectedRowsOutput } from '../../prisma/base/output/affected-rows.output';
import { UserCreateManyArgs } from './args/user-create-many.args';
import { UserUpdateManyArgs } from './args/user-update-many.args';
import { UserDeleteManyArgs } from './args/user-delete-many.args';
import { PostFindManyArgs } from '../../post/base/args/post-find-many.args';
import { Post } from '../../post/base/model/post.model';

export class UserBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: UserCreateArgs): Promise<User> {
    return this.prisma.client.user.create(args);
  }

  async update(args: UserUpdateArgs): Promise<User | null> {
    return this.prisma.client.user.update(args);
  }

  async delete(args: UserDeleteArgs): Promise<User | null> {
    return this.prisma.client.user.delete(args);
  }

  async findUnique(args: UserFindUniqueArgs): Promise<User | null> {
    return this.prisma.client.user.findUnique(args);
  }

  async count(args: UserCountArgs): Promise<number> {
    return this.prisma.client.user.count(args);
  }

  async findMany(args: UserFindManyArgs): Promise<Array<User>> {
    return this.prisma.client.user.findMany(args);
  }

  async createMany(args: UserCreateManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.user.createMany(args);
  }

  async updateMany(args: UserUpdateManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.user.updateMany(args);
  }

  async deleteMany(args: UserDeleteManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.user.deleteMany(args);
  }

  async resolvePosts(
    parent: User,
    args: PostFindManyArgs,
  ): Promise<Array<Post>> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .posts(args);
  }

  async resolveParent(parent: User): Promise<User | null> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .parent();
  }

  async resolveChildren(
    parent: User,
    args: UserFindManyArgs,
  ): Promise<Array<User>> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .children(args);
  }

  async resolveAnotherPosts(
    parent: User,
    args: PostFindManyArgs,
  ): Promise<Array<Post>> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .anotherPosts(args);
  }
}
