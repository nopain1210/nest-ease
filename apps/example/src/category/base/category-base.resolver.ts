// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { CategoryBaseService } from './category-base.service';
import { Resolver, Query, Mutation, Args, Int, Parent, ResolveField } from '@nestjs/graphql';
import { Category } from './model/category.model';
import { CategoryCreateArgs } from './args/category-create.args';
import { CategoryUpdateArgs } from './args/category-update.args';
import { CategoryDeleteArgs } from './args/category-delete.args';
import { CategoryFindUniqueArgs } from './args/category-find-unique.args';
import { CategoryCountArgs } from './args/category-count.args';
import { CategoryFindManyArgs } from './args/category-find-many.args';
import { AffectedRowsOutput } from '../../prisma/base/output/affected-rows.output';
import { CategoryCreateManyArgs } from './args/category-create-many.args';
import { CategoryUpdateManyArgs } from './args/category-update-many.args';
import { CategoryDeleteManyArgs } from './args/category-delete-many.args';
import { PostFindManyArgs } from '../../post/base/args/post-find-many.args';
import { Post } from '../../post/base/model/post.model';
import { CategoryMetadata } from '../../category-metadata/base/model/category-metadata.model';

@Resolver(() => Category)
export class CategoryBaseResolver {
  constructor(protected readonly service: CategoryBaseService) {
  }

  @Mutation(() => Category, { nullable: false })
  async createCategory(@Args() args: CategoryCreateArgs): Promise<Category> {
    return this.service.create(args);
  }

  @Mutation(() => Category, { nullable: true })
  async updateCategory(@Args() args: CategoryUpdateArgs): Promise<Category | null> {
    return this.service.update(args);
  }

  @Mutation(() => Category, { nullable: true })
  async deleteCategory(@Args() args: CategoryDeleteArgs): Promise<Category | null> {
    return this.service.delete(args);
  }

  @Query(() => Category, { nullable: true })
  async category(@Args() args: CategoryFindUniqueArgs): Promise<Category | null> {
    return this.service.findUnique(args);
  }

  @Query(() => Int, { nullable: false })
  async categoryCount(@Args() args: CategoryCountArgs): Promise<number> {
    return this.service.count(args);
  }

  @Query(() => [Category], { nullable: false })
  async categoryList(@Args() args: CategoryFindManyArgs): Promise<Array<Category>> {
    return this.service.findMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createCategoryList(@Args() args: CategoryCreateManyArgs): Promise<AffectedRowsOutput> {
    return this.service.createMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateCategoryList(@Args() args: CategoryUpdateManyArgs): Promise<AffectedRowsOutput> {
    return this.service.updateMany(args);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteCategoryList(@Args() args: CategoryDeleteManyArgs): Promise<AffectedRowsOutput> {
    return this.service.deleteMany(args);
  }

  @ResolveField(() => [Post], { nullable: false })
  posts(@Parent() parent: Category, @Args() args: PostFindManyArgs): Promise<Array<Post>> {

    return this.service.resolvePosts(parent, args);
            
  }

  @ResolveField(() => CategoryMetadata, { nullable: true })
  metadata(@Parent() parent: Category): Promise<CategoryMetadata | null> {

    return this.service.resolveMetadata(parent);
            
  }
}
