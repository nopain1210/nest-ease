// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { PrismaService } from '../../../prisma/prisma.service';
import { User, Post } from '../model';
import {
  UserCreateArgs,
  UserUpdateArgs,
  UserDeleteArgs,
  UserFindUniqueArgs,
  UserCountArgs,
  UserFindManyArgs,
  UserCreateManyArgs,
  UserUpdateManyArgs,
  UserDeleteManyArgs,
  PostFindManyArgs,
} from '../args';
import { AffectedRowsOutput } from '../output';

export class UserBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: UserCreateArgs): Promise<User> {
    return this.prisma.client.user.create(args);
  }

  async update(args: UserUpdateArgs): Promise<User | null> {
    return this.prisma.client.user.update(args);
  }

  async delete(args: UserDeleteArgs): Promise<User | null> {
    return this.prisma.client.user.delete(args);
  }

  async findUnique(args: UserFindUniqueArgs): Promise<User | null> {
    return this.prisma.client.user.findUnique(args);
  }

  async count(args: UserCountArgs): Promise<number> {
    return this.prisma.client.user.count(args);
  }

  async findMany(args: UserFindManyArgs): Promise<Array<User>> {
    return this.prisma.client.user.findMany(args);
  }

  async createMany(args: UserCreateManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.user.createMany(args);
  }

  async updateMany(args: UserUpdateManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.user.updateMany(args);
  }

  async deleteMany(args: UserDeleteManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.user.deleteMany(args);
  }

  resolvePosts(parent: User, args: PostFindManyArgs): Promise<Array<Post>> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .posts(args);
  }

  resolveParent(parent: User): Promise<User | null> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .parent();
  }

  resolveChildren(parent: User, args: UserFindManyArgs): Promise<Array<User>> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .children(args);
  }

  resolveAnotherPosts(
    parent: User,
    args: PostFindManyArgs
  ): Promise<Array<Post>> {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .anotherPosts(args);
  }
}
