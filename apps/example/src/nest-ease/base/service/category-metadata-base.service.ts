// This file is generated by @nest-ease/generator. DO NOT MODIFY!
/* eslint-disable @typescript-eslint/no-explicit-any */
import { PrismaService } from '../../../prisma/prisma.service';
import { CategoryMetadata, Category } from '../model';
import {
  CategoryMetadataCreateArgs,
  CategoryMetadataUpdateArgs,
  CategoryMetadataDeleteArgs,
  CategoryMetadataDeleteManyArgs,
  CategoryMetadataFindUniqueArgs,
  CategoryMetadataCountArgs,
  CategoryMetadataFindManyArgs,
} from '../args';
import { AffectedRowsOutput } from '../output';
import { Int } from '@nestjs/graphql';

export class CategoryMetadataBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: CategoryMetadataCreateArgs): Promise<CategoryMetadata> {
    return this.prisma.client.categoryMetadata.create(args);
  }

  async update(
    args: CategoryMetadataUpdateArgs
  ): Promise<CategoryMetadata | null> {
    return this.prisma.client.categoryMetadata.update(args);
  }

  async delete(
    args: CategoryMetadataDeleteArgs
  ): Promise<CategoryMetadata | null> {
    return this.prisma.client.categoryMetadata.delete(args);
  }

  async deleteMany(
    args: CategoryMetadataDeleteManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.prisma.client.categoryMetadata.deleteMany(args);
  }

  async findUnique(
    args: CategoryMetadataFindUniqueArgs
  ): Promise<CategoryMetadata | null> {
    return this.prisma.client.categoryMetadata.findUnique(args);
  }

  async count(args: CategoryMetadataCountArgs): Promise<number> {
    return this.prisma.client.categoryMetadata.count(args);
  }

  async findMany(
    args: CategoryMetadataFindManyArgs
  ): Promise<Array<CategoryMetadata>> {
    return this.prisma.client.categoryMetadata.findMany(args);
  }

  resolveCategory(parent: CategoryMetadata): Promise<Category> {
    return this.prisma.client.categoryMetadata
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .category();
  }
}
