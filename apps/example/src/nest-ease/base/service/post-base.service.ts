// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { PrismaService } from '../../../prisma/prisma.service';
import { Post, User, Category } from '../model';
import {
  PostCreateArgs,
  PostUpdateArgs,
  PostDeleteArgs,
  PostFindUniqueArgs,
  PostCountArgs,
  PostFindManyArgs,
  PostCreateManyArgs,
  PostUpdateManyArgs,
  PostDeleteManyArgs,
  CategoryFindManyArgs,
} from '../args';
import { AffectedRowsOutput } from '../output';

export class PostBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: PostCreateArgs): Promise<Post> {
    return this.prisma.client.post.create(args);
  }

  async update(args: PostUpdateArgs): Promise<Post | null> {
    return this.prisma.client.post.update(args);
  }

  async delete(args: PostDeleteArgs): Promise<Post | null> {
    return this.prisma.client.post.delete(args);
  }

  async findUnique(args: PostFindUniqueArgs): Promise<Post | null> {
    return this.prisma.client.post.findUnique(args);
  }

  async count(args: PostCountArgs): Promise<number> {
    return this.prisma.client.post.count(args);
  }

  async findMany(args: PostFindManyArgs): Promise<Array<Post>> {
    return this.prisma.client.post.findMany(args);
  }

  async createMany(args: PostCreateManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.post.createMany(args);
  }

  async updateMany(args: PostUpdateManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.post.updateMany(args);
  }

  async deleteMany(args: PostDeleteManyArgs): Promise<AffectedRowsOutput> {
    return this.prisma.client.post.deleteMany(args);
  }

  resolveAuthor(parent: Post): Promise<User> {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .author();
  }

  resolveAnotherAuthor(parent: Post): Promise<User> {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .anotherAuthor();
  }

  resolveCategories(
    parent: Post,
    args: CategoryFindManyArgs
  ): Promise<Array<Category>> {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .categories(args);
  }
}
