// This file is generated by @nest-ease/generator. DO NOT MODIFY!
/* eslint-disable @typescript-eslint/no-explicit-any */
import { PrismaService } from '../../../prisma/prisma.service';
import { Prisma } from '../../../@prisma-client';
import { Post, User, Category } from '../model';
import { AffectedRowsOutput } from '../output';

export class PostBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: Prisma.PostCreateArgs): Promise<Post> {
    return this.prisma.client.post.create(args);
  }

  async update(args: Prisma.PostUpdateArgs): Promise<Post | null> {
    return this.prisma.client.post.update(args);
  }

  async delete(args: Prisma.PostDeleteArgs): Promise<Post | null> {
    return this.prisma.client.post.delete(args);
  }

  async deleteMany(
    args: Prisma.PostDeleteManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.prisma.client.post.deleteMany(args);
  }

  async findUnique(args: Prisma.PostFindUniqueArgs): Promise<Post | null> {
    return this.prisma.client.post.findUnique(args);
  }

  async findMany(args: Prisma.PostFindManyArgs): Promise<Array<Post>> {
    return this.prisma.client.post.findMany(args);
  }

  resolveAuthor(parent: Post): Promise<User> {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: { id: parent.id },
      })
      .author();
  }

  resolveAnotherAuthor(parent: Post): Promise<User> {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: { id: parent.id },
      })
      .anotherAuthor();
  }

  resolveCategories(
    parent: Post,
    args: Prisma.CategoryFindManyArgs
  ): Promise<Array<Category>> {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: { id: parent.id },
      })
      .categories(args);
  }

  count(args: Prisma.PostCountArgs): Promise<number> {
    return this.prisma.client.post.count(args);
  }
}
