// This file is generated by @nest-ease/generator. DO NOT MODIFY!
import { PrismaService } from '../../prisma/prisma.service';
import { Standalone } from './model/standalone.model';
import { StandaloneCreateArgs } from './args/standalone-create.args';
import { StandaloneUpdateArgs } from './args/standalone-update.args';
import { StandaloneDeleteArgs } from './args/standalone-delete.args';
import { StandaloneFindUniqueArgs } from './args/standalone-find-unique.args';
import { StandaloneCountArgs } from './args/standalone-count.args';
import { StandaloneFindManyArgs } from './args/standalone-find-many.args';
import { AffectedRowsOutput } from '../../prisma/base/output/affected-rows.output';
import { StandaloneCreateManyArgs } from './args/standalone-create-many.args';
import { StandaloneUpdateManyArgs } from './args/standalone-update-many.args';
import { StandaloneDeleteManyArgs } from './args/standalone-delete-many.args';

export class StandaloneBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async create(args: StandaloneCreateArgs): Promise<Standalone> {
    return this.prisma.client.standalone.create(args);
  }

  async update(args: StandaloneUpdateArgs): Promise<Standalone | null> {
    return this.prisma.client.standalone.update(args);
  }

  async delete(args: StandaloneDeleteArgs): Promise<Standalone | null> {
    return this.prisma.client.standalone.delete(args);
  }

  async findUnique(args: StandaloneFindUniqueArgs): Promise<Standalone | null> {
    return this.prisma.client.standalone.findUnique(args);
  }

  async count(args: StandaloneCountArgs): Promise<number> {
    return this.prisma.client.standalone.count(args);
  }

  async findMany(args: StandaloneFindManyArgs): Promise<Array<Standalone>> {
    return this.prisma.client.standalone.findMany(args);
  }

  async createMany(
    args: StandaloneCreateManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.prisma.client.standalone.createMany(args);
  }

  async updateMany(
    args: StandaloneUpdateManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.prisma.client.standalone.updateMany(args);
  }

  async deleteMany(
    args: StandaloneDeleteManyArgs
  ): Promise<AffectedRowsOutput> {
    return this.prisma.client.standalone.deleteMany(args);
  }
}
